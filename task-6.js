// Промисы. Описать, что происходит на каждой строчке.

function func1() {
  return Promise.resolve('1');
}

function func2() {
  return Promise.resolve('2');
}

function func3(res) {
  return console.log(res);
}

// 7.1:
func1()
// func1 возвращает выполненный промис со значением '1'
  .then(() => func2())
// значение предыдущего промиса не используется, выполняется функция, которая возвращает выполненный промис со значением '2'
  .then(func3);
// выполняется func3, которая принимает значение предыдущего промиса и выводит его в консоль, то есть '2'

// 7.2:
func1()
// func1 возвращает выполненный промис со значением '1'
  .then(() => {
    func2();
  })
// значение предыдущего промиса не используется, выполняется функция, но ее результат не возвращается, поэтому дальше передается undefined
  .then(func3);
// выполняется func3, которая принимает undefined и выводит его в консоль

// 7.3:
func1()
// func1 возвращает выполненный промис со значением '1'
  .then(func2())
// выполняется func2, но ее результат не возвращается, поэтому дальше передается значение предыдущего промиса, то есть '1'
  .then(func3);
// выполняется func3, которая принимает '1' и выводит его в консоль

// 7.4:
func1()
// func1 возвращает выполненный промис со значением '1'
  .then(func2)
// значание предыдущего промиса не используется, выполняется func2, которая возвращает промис со значением '2'
  .then(func3);
// выполняется func3, которая принимает значение предыдущего промиса и выводит его в консоль, то есть '2'
